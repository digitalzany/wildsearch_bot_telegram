from unittest.mock import patch

import pytest
from envparse import env


@pytest.mark.parametrize('message', [
    ['https://www.wildberries.ru/catalog/dom-i-dacha/tovary-dlya-remonta/instrumenty/magnitnye-instrumenty'],
    ['https://www.wildberries.ru/brands/la-belle-femme'],
    ['https://www.wildberries.ru/catalog/0/search.aspx?subject=99&search=—Å–∞–ø–æ–≥–∏&sort=popular'],
])
@patch('src.tasks.schedule_wb_category_export.apply_async')
def test_command_catalog(mocked_celery_delay, web_app, telegram_json_message, message):
    telegram_json = telegram_json_message(message=str(message))

    web_app.simulate_post('/' + env('TELEGRAM_API_TOKEN'), body=telegram_json)

    mocked_celery_delay.assert_called()


@patch('src.tasks.schedule_wb_category_export.apply_async')
@patch('telegram.Bot.send_message')
def test_command_catalog_throttled(mocked_bot_send_message, mocked_celery_delay, web_app, telegram_json_message, create_telegram_command_logs):
    create_telegram_command_logs(5, 'wb_catalog', 'https://www.wildberries.ru/catalog/knigi-i-diski/kantstovary/tochilki')
    telegram_json = telegram_json_message(message='https://www.wildberries.ru/catalog/dom-i-dacha/tovary-dlya-remonta/instrumenty/magnitnye-instrumenty')

    web_app.simulate_post('/' + env('TELEGRAM_API_TOKEN'), body=telegram_json)

    assert '–ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –∑–∞–∫–æ–Ω—á–∏–ª—Å—è' in mocked_bot_send_message.call_args.kwargs['text']


@pytest.mark.parametrize('message_text, expected_text', [
    ['‚ÑπÔ∏è –û —Å–µ—Ä–≤–∏—Å–µ', '–≠—Ç–æ—Ç —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç —Å–æ–±–∏—Ä–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –æ —Ç–æ–≤–∞—Ä–∞—Ö –Ω–∞ Wildberries'],
    ['üöÄ –£–≤–µ–ª–∏—á–∏—Ç—å –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤', '–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–≤–µ–ª–∏—á–∏—Ç—å –∏–ª–∏ —Å–Ω—è—Ç—å –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤'],
    ['–Ø –ø—Ä–æ—Å—Ç–æ –º–∏–º–æ–∫—Ä–æ–∫–æ–¥–∏–ª', '–ù–µ–ø–æ–Ω—è—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞']
])
@patch('telegram.Bot.send_message')
def test_reply_messages(mocked_bot_send_message, web_app, telegram_json_message, message_text, expected_text):
    telegram_json = telegram_json_message(message=str(message_text))

    web_app.simulate_post('/' + env('TELEGRAM_API_TOKEN'), body=telegram_json)

    assert expected_text in mocked_bot_send_message.call_args.kwargs['text']


@pytest.mark.parametrize('command, expected_text', [
    ['/start', '–≠—Ç–æ—Ç —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç —Å–æ–±–∏—Ä–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –æ —Ç–æ–≤–∞—Ä–∞—Ö'],
    ['/help', '–≠—Ç–æ—Ç —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç —Å–æ–±–∏—Ä–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –æ —Ç–æ–≤–∞—Ä–∞—Ö'],
])
@patch('telegram.Bot.send_message')
def test_reply_commands(mocked_reply_text, web_app, telegram_json_command, command, expected_text):
    telegram_json = telegram_json_command(command=command)

    web_app.simulate_post('/' + env('TELEGRAM_API_TOKEN'), body=telegram_json)

    mocked_reply_text.assert_called()
    assert expected_text in mocked_reply_text.call_args.kwargs['text']


@pytest.mark.parametrize('callback, expected_text', [
    ['keyboard_help_catalog_link', '—Å–∫–æ–ø–∏—Ä—É–π—Ç–µ –∏–∑ –∞–¥—Ä–µ—Å–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ –±—Ä–∞—É–∑–µ—Ä–∞ —Å—Å—ã–ª–∫—É'],
    ['keyboard_analyse_category', '–ê–Ω–∞–ª–∏–∑ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏'],
    ['keyboard_help_info_feedback', '–Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º –≤–µ—Å—Ç–æ—á–∫—É'],
])
@patch('telegram.Bot.send_message')
def test_reply_callbacks(mocked_bot_send_message, web_app, telegram_json_callback, callback, expected_text):
    telegram_json = telegram_json_callback(callback=callback)

    web_app.simulate_post('/' + env('TELEGRAM_API_TOKEN'), body=telegram_json)

    assert expected_text in mocked_bot_send_message.call_args.kwargs['text']