import io
import logging

import boto3
from celery import Celery
from envparse import env
from telegram import Bot

from .scrapinghub_helper import WbCategoryComparator, WbCategoryStats, wb_category_export

env.read_envfile()

celery = Celery('tasks')
celery.conf.update(
    broker_url=env('REDIS_URL'),
    task_always_eager=env('CELERY_ALWAYS_EAGER', cast=bool, default=False),
    task_serializer='pickle',  # we transfer binary data like photos or voice messages,
    accept_content=['pickle'],
)

# –≤–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏
logger = logging.getLogger(__name__)

bot = Bot(env('TELEGRAM_API_TOKEN'))
s3 = boto3.client('s3')


def get_cat_update_users():
    return env('WILDSEARCH_TEST_USER_LIST').split(',')


@celery.task()
def calculate_wb_category_diff():
    comparator = WbCategoryComparator()
    comparator.load_from_api()
    comparator.calculate_diff()

    added_count = comparator.get_categories_count('added')
    removed_count = comparator.get_categories_count('removed')

    added_unique_count = comparator.get_categories_unique_count('added')

    if added_unique_count == 0:
        message = f'–ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å—É—Ç–∫–∏ –Ω–∞ Wildberries –Ω–µ –¥–æ–±–∞–≤–∏–ª–æ—Å—å –∫–∞—Ç–µ–≥–æ—Ä–∏–π'
        files = None
    else:
        comparator.dump_to_s3_file('added')
        comparator.dump_to_s3_file('removed')
        files = [
            comparator.get_s3_file_name('added'),
            comparator.get_s3_file_name('removed'),
        ]

        message = f"""
            –û–±–Ω–æ–≤–∏–ª–∏—Å—å –¥–∞–Ω–Ω—ã–µ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –Ω–∞ Wildberries. C –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ  –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–æ–±–∞–≤–∏–ª–æ—Å—å
            {added_count} –∫–∞—Ç–µ–≥–æ—Ä–∏–π, –∏–∑ –Ω–∏—Ö {added_unique_count} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö. –°–∫—Ä—ã–ª–æ—Å—å
            {removed_count} –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        """

    for uid in get_cat_update_users():
        send_wb_category_update_message.delay(uid, message, files)


@celery.task()
def calculate_wb_category_stats(job_id, chat_id):
    stats = WbCategoryStats().fill_from_api(job_id)

    message = f"""
        [{stats.get_category_name()}]({stats.get_category_url()})\n
        \n
        –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤: `{stats.get_goods_count()}`\n
        \n
        –°–∞–º—ã–π –¥–æ—Ä–æ–≥–æ–π: `{"{:,}".format(stats.get_goods_price_max())}` —Ä—É–±.\n
        –°–∞–º—ã–π –¥–µ—à–µ–≤—ã–π: `{"{:,}".format(stats.get_goods_price_min())}` —Ä—É–±.\n
        –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞: `{"{:,}".format(stats.get_goods_price_mean())}` —Ä—É–±.\n
        \n
        –û–±—ä–µ–º –ø—Ä–æ–¥–∞–∂: `{"{:,}".format(stats.get_sales_sum())}` —Ä—É–±. (`{"{:,}".format(stats.get_sales_count())}` —à—Ç.)\n
        –°—Ä–µ–¥–Ω–∏–µ –ø—Ä–æ–¥–∞–∂–∏: `{"{:,}".format(stats.get_sales_mean())}` —Ä—É–±. (`{"{:,}".format(stats.get_sales_mean_count())}` —à—Ç.)\n
        –ú–µ–¥–∏–∞–Ω–∞ –ø—Ä–æ–¥–∞–∂: `{"{:,}".format(stats.get_sales_median())}` —Ä—É–±. (`{"{:,}".format(stats.get_sales_median_count())}` —à—Ç.)\n
    """

    bot.send_message(chat_id=chat_id, text=message, parse_mode='Markdown', disable_web_page_preview=True)

    bot.send_document(
        chat_id=chat_id,
        document=stats.get_category_excel(),
        filename=f'{stats.get_category_name()} –Ω–∞ Wildberries.xlsx',
    )


@celery.task()
def schedule_wb_category_export(category_url, chat_id):
    try:
        wb_category_export(category_url, chat_id)
        message = f'üß†–ú—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–∞—à –∑–∞–ø—Ä–æ—Å. –ö–æ–≥–¥–∞ –≤—Å–µ –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤–æ, –≤—ã –ø–æ–ª—É—á–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç.\n\n–ë–æ–ª—å—à–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (—Å–≤—ã—à–µ 1 —Ç—ã—Å. —Ç–æ–≤–∞—Ä–æ–≤) –º–æ–≥—É—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å—Å—è –¥–æ –æ–¥–Ω–æ–≥–æ —á–∞—Å–∞.\n\n–ú–∞–ª–µ–Ω—å–∫–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –≤ —Ç–µ—á–µ–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –º–∏–Ω—É—Ç.'
    except Exception:
        message = f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫–∞—Ç–∞–ª–æ–≥–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–ø—Ä–æ—Å–∏—Ç—å –µ–≥–æ –ø–æ–∑–∂–µ'

        pass

    bot.send_message(chat_id=chat_id, text=message)


@celery.task()
def send_wb_category_update_message(uid, message, files=None):
    if files is None:
        files = []

    bot.send_message(chat_id=uid, text=message)

    for file_name in files:
        memory_file = io.BytesIO()
        s3.download_fileobj(env('AWS_S3_BUCKET_NAME'), file_name, memory_file)
        memory_file.seek(0, 0)
        bot.send_document(chat_id=uid, document=memory_file, filename=file_name)
